package ms.envio.correo.main.service;

import java.util.Date;
import java.util.Properties;

import org.eclipse.angus.mail.smtp.SMTPTransport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import jakarta.mail.Address;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Multipart;
import jakarta.mail.Session;
import jakarta.mail.internet.AddressException;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import jakarta.mail.internet.MimeMultipart;
import ms.envio.correo.main.modelo.EntradaEnvioCorreo;
import ms.envio.correo.main.util.EntryPoint;

public class EnvioCorreoImpl implements IEnvioCorreo{

	private static final Logger log = LoggerFactory.getLogger(EnvioCorreoImpl.class);
	
	private static final String TIPO_TXT = "TXT";
	
	private static final String TIPO_HTML = "HTML";

	private static final String ADJUNTO_TIPO_PDF = "PDF";
	  
	private static final String ADJUNTO_TIPO_ZIP = "ZIP";
	
	@Autowired
	private EntryPoint entryPoint;
	
	@Override
	public boolean validarData(EntradaEnvioCorreo entrada) {
		try {
			log.info("Ingresando a validación");
			
			if(entrada.getDestinatarios() == null &&
				entrada.getDestinatarios().isEmpty() ||
				entrada.getCuerpo() == null ||
				entrada.getAsunto().equals("")) {
				log.info("No cumples con los parametros de entrada");
				return false;
			}
		}catch (Exception e) {
			log.info("Error en validaciones de enrtada: "+e.getMessage());
		}
		log.info("Parametros completos");
		return true;
	}

	@Override
	public boolean enviarCorreo(EntradaEnvioCorreo entrada) {
		log.info("Comienza envío de correo");
		Properties props = System.getProperties();
		String host = entryPoint.getHost();
		String user = entryPoint.getUsernameMail();
		String pass = entryPoint.getPassword();
		String from = entryPoint.getFromMail();
		
		props.put("mail.smtp.host", host);
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		
		Session session = Session.getDefaultInstance(props,null);
		MimeMessage message = new MimeMessage(session);
		
		try {
			log.info("Agregando datos en clase mensaje");
			log.info("Agregando from");
			message.setFrom((Address) new InternetAddress(from));
			log.info("Agregando destinatarios");
			for (String to : entrada.getDestinatarios()) {
				message.addRecipient(Message.RecipientType.TO, (Address) new InternetAddress(to));
			}
			log.info("Agregando subject");
			message.setSubject(entrada.getAsunto());
			log.info("Agregando fecha actual");
			message.setSentDate(new Date());
			log.info("Instanciando multipart");
			MimeMultipart mimeMultipart = new MimeMultipart();
			log.info("Instanciando Cuerpo Correo");
			Multipart multipart = agregarCuerpo(entrada, (Multipart)mimeMultipart);
		    multipart = agregarAdjuntos(entrada, multipart);
		    log.info("Seteando contenido del mensaje");
		    message.setContent(multipart);
		    log.info("Instanciando transporte SMTP");
		    SMTPTransport transporte = (SMTPTransport)session.getTransport("smtp");
			log.info("Conectando...");
			transporte.connect(host, user, pass);
			log.info("Enviando...");
			transporte.sendMessage((Message)message, message.getAllRecipients());
			log.info("Cerrando transporte");
			transporte.close();
			log.info("Final exitoso de envio de correo para destinatario(s) " + entrada.getDestinatarios().toString());
			return true;
		}catch (AddressException ae) {
			log.info(ae.getMessage());
			return false;
		}catch (MessagingException me) {
			log.info("MessagingException: "+ (Throwable)me);
			return false;
		}
		
		return false;
	}

}
